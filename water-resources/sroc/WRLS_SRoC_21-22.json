{
	"info": {
		"_postman_id": "9a8825d2-26d5-4129-b5b8-e79a52be6be9",
		"name": "WRLS_SRoC_21/22",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "WRLS_SRoC_21/22",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct Charge value\", function () {\r",
							"    pm.expect(response.WRLSChargingResponse.chargeValue).to.eql(data.expChargeValue);\r",
							"});\r",
							"\r",
							"/*pm.test(\"Correct AbatementAdjustment\", function () {\r",
							"    var expectedAA = data.expAbatementAdjustment;\r",
							"    if (expectedAA === '') {\r",
							"        expectedAA = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.abatementAdjustment).to.eql(expectedAA);\r",
							"});*/\r",
							"\r",
							"pm.test(\"Correct S127 Agreement Factor\", function () {\r",
							"    var expectedS127 = data.expS127Agreement;\r",
							"    if (expectedS127 === '') {\r",
							"        expectedS127 = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.s127Agreement).to.eql(expectedS127);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct S130 Agreement Factor\", function () {\r",
							"    var expectedS130 = data.expS130Agreement;\r",
							"    if (expectedS130 === '') {\r",
							"        expectedS130 = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.s130Agreement).to.eql(expectedS130);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Baseline Charge\", function () {\r",
							"    pm.expect(response.WRLSChargingResponse.baselineCharge).to.eql(data.expBaselineCharge);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Supported Source Charge\", function () {\r",
							"    pm.expect(response.WRLSChargingResponse.supportedSourceCharge).to.eql(data.expSupportedSourceCharge);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Water Company Charge\", function () {\r",
							"    pm.expect(response.WRLSChargingResponse.waterCompanyCharge).to.eql(data.expWaterCompanyCharge);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Compensation Charge Percentage\", function () {\r",
							"    var expectedCompChargePercentage = data.expCompensationChargePercentage;\r",
							"    if (expectedCompChargePercentage === '') {\r",
							"        expectedCompChargePercentage = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.compensationChargePercentage).to.eql(expectedCompChargePercentage);\r",
							"});\r",
							"\r",
							"/*pm.test(\"Correct Aggregate Adjustment\", function () {\r",
							"    var expectedAggAdjustment = data.expAggregateAdjustment;\r",
							"    if (expectedAggAdjustment === '') {\r",
							"        expectedAggAdjustment = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.aggregateAdjustment).to.eql(expectedAggAdjustment);\r",
							"});*/\r",
							"\r",
							"pm.test(\"Correct Winter Only Adjustment\", function () {\r",
							"    var expectedWintOnly = data.expWinterOnlyAdjustment\r",
							"    if (expectedWintOnly === '') {\r",
							"        expectedWintOnly = null;\r",
							"    }\r",
							"    pm.expect(response.WRLSChargingResponse.winterOnlyAdjustment).to.eql(expectedWintOnly);\r",
							"});\r",
							"\r",
							"/*pm.test(\"Correct Adjustment Factor\", function () {\r",
							"    pm.expect(response.WRLSChargingResponse.adjustmentFactor).to.eql(data.expAdjustmentFactor);\r",
							"\r",
							"});*/\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"WRLSChargingRequest\": {\r\n        \"secondPartCharge\": {{secondPartCharge}},\r\n        \"compensationCharge\": {{compensationCharge}},\r\n        \"chargeCategory\": \"{{chargeCategory}}\",\r\n        \"waterUndertaker\": {{waterUndertaker}},\r\n        \"regionalChargingArea\": \"{{regionalChargingArea}}\",\r\n        \"supportedSourceChargeFlag\": {{supportedSourceChargeFlag}},\r\n        \"supportedSourceName\": \"{{supportedSourceName}}\",\r\n        \"abatementAdjustment\": {{abatementAdjustment}},\r\n        \"adjustmentFactor\": {{adjustmentFactor}},\r\n        \"s127Agreement\": {{s127Agreement}},\r\n        \"s130Agreement\": {{s130Agreement}},\r\n        \"aggregateProportion\": {{aggregateProportion}},\r\n        \"waterCompanyChargeFlag\": {{waterCompanyChargeFlag}},\r\n        \"loss\": \"{{loss}}\",\r\n        \"billableDays\": {{billableDays}},\r\n        \"abstractableDays\": {{abstractableDays}},\r\n        \"winterOnly\": {{winterOnly}},\r\n        \"actualVolume\": {{actualVolume}},\r\n        \"authorisedVolume\": {{authorisedVolume}}\r\n     }\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/TEST_WRLS_SRoC_RuleApp/1.0/WRLS_SRoC_RuleSet_2021_22",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"TEST_WRLS_SRoC_RuleApp",
						"1.0",
						"WRLS_SRoC_RuleSet_2021_22"
					]
				}
			},
			"response": []
		}
	]
}